#!/usr/bin/env nix-shell
#!nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/f366af7a1b3891d9370091ab03150d3a6ee138fa.tar.gz -i zsh ./shell.nix

set -e
set -u
set -o pipefail

optimize=false
while [[ $1 =~ ^- ]]; do
  case $1 in
    -O)
      optimize=true
      shift
      ;;
  esac
done

year=$1
day=$(printf '%02d' $2)
shift 2
if [[ $# -gt 0 ]]; then
  exercise=${1:-}
  shift
fi

output_directory="build/${year}"
if (( ${+exercise} )); then
  name="AOC_${day}_${exercise}"
else
  name="AOC_${day}"
fi

mkdir -p $output_directory

>&2 if [[ -e "${year}/${name}.hs" ]]; then
  files=("${year}/${name}.hs")
  if [[ -d "${year}/Helpers" ]]; then
    files+=(${year}/Helpers/*.hs)
  fi
  output_directory="${output_directory}/${name}"
  executable="${output_directory}/run"
  mkdir -p $output_directory
  compilation_args=('-Wall')
  if $optimize; then
    compilation_args+=('-O2')
  fi
  ormolu -i $files
  hlint $files || :
  ghc \
    $compilation_args \
    -o $executable \
    -odir $output_directory \
    -hidir $output_directory \
    $files
  echo >&2
elif [[ -e "${year}/${name}.pl" ]]; then
  executable=(swipl "${year}/${name}.pl")
elif [[ -e "${year}/${name}.pony" ]]; then
  executable="${output_directory}/${name}"
  if $optimize; then
    compilation_args=()
  else
    compilation_args=(--debug)
  fi
  temp_src_root="${TMPDIR:-/tmp}/advent-of-code/${year}"
  trap 'rm -rf $temp_src_root' EXIT
  temp_src="${temp_src_root}/${name}"
  mkdir -p $temp_src
  (
    cd $year
    files=(helpers/*.pony corral.json lock.json)
    if [[ -e _corral ]]; then
      files+=(_corral)
    fi
    if [[ -e _repos ]]; then
      files+=(_repos)
    fi
    cp -R "${name}.pony" $files $temp_src
  )
  output_directory="${PWD}/${output_directory}"
  hash_file="${output_directory}/${name}.input-hash"
  current_hash=$([[ -e $hash_file ]] && cat $hash_file || :)
  (
    cd $temp_src
    new_hash=$((echo $compilation_args; find . -type f | sort | xargs sha256sum) | sha256sum)
    if [[ $current_hash != $new_hash ]]; then
      rm -f $hash_file
      corral run -- ponyc $compilation_args --output=${output_directory} >&2
      echo $new_hash > $hash_file
    fi
    rm -rf $temp_src_root
  )
elif [[ -e "${year}/${name}.rs" ]]; then
  file="${year}/${name}.rs"
  executable_name="aoc_${year}_${day}_${exercise}"
  if $optimize; then
    executable="${output_directory}/release/${executable_name}"
    compilation_args=('--release')
  else
    executable="${output_directory}/debug/${executable_name}"
    compilation_args=()
    export RUST_BACKTRACE=1
  fi
  cargo_file="${year}/Cargo.toml"
  cp -f "${year}/Cargo.template.toml" $cargo_file
  for bin in ${year}/AOC_*.rs; do
    echo >> $cargo_file
    echo '[[bin]]' >> $cargo_file
    echo "name = \"$(basename $bin .rs | sed "s/^AOC_/aoc_${year}_/")\"" >> $cargo_file
    echo "path = \"$(basename $bin)\"" >> $cargo_file
  done
  cargo fmt
  cargo build $compilation_args --target-dir $output_directory --bin $executable_name
  echo >&2
elif [[ -e "${year}/${name}.swift" ]]; then
  files=("${year}/${name}.swift" ${year}/Helpers/*.swift)
  executable="${output_directory}/${name}"
  if $optimize; then
    compilation_args=('-O')
  else
    compilation_args=()
  fi
  swiftformat $files
  swiftc $compilation_args -o $executable $files
  echo >&2 'Compiled.'
  echo >&2
else
  echo >&2 'The program does not exist.'
  exit 1
fi

time $executable $@
